
# This file was *autogenerated* from the file pln.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)# programme lineaine sage

# arbre a n sommets

n = _sage_const_3  # taille de l'arbre
k = _sage_const_2  # taille du sous-arbre
a = _sage_const_2  # nombre d'arete

p = MixedIntegerLinearProgram()

# aretes
# peut etre faire [0, 1]
for i in range(a):
    x = p.new_variable(binary = True)

# sommets et feuilles
for i in range(n):
    y = p.new_variable(binary = True)
    f = p.new_variable(integer = True, nonnegative = False)

# objectif
p.set_objective(p.sum(f[i] for i in range(n)) + p.sum(x[j] for j in range(a)) )

# contraintes
p.add_constraint(p.sum(y[i] for i in range(n)) == k)  # k la taille du sous arbre 

p.add_constraint(x[_sage_const_0 ] <= (y[_sage_const_0 ] + y[_sage_const_1 ])/_sage_const_2 )  # presence d'une arete
p.add_constraint(x[_sage_const_1 ] <= (y[_sage_const_1 ] + y[_sage_const_2 ])/_sage_const_2 )  # on decrit chaque arete a la main

p.add_constraint(p.sum(y[i] for i in range(n)) == p.sum(x[j] for j in range(a)) + _sage_const_1 )  # arbre, connexe

for i in range(n):
        p.add_constraint(f[i] <= _sage_const_2  - (p.sum(x[j] for j in range(a))) )  # contraintes sur les feuilles
        p.add_constraint(f[i] <= _sage_const_1  + (p.sum(x[j] for j in range(a))) )
        p.add_constraint(f[i] <= y[i]) # une feuille est un sommet 
        # contraintes utiles ou redondantes ?

# resolution
print("Solve")
print(p.solve())
print("Aretes x")
print(p.get_values(x))
print("Sommets y")
print(p.get_values(y))
print("Feuilles f")
print(p.get_values(f))

