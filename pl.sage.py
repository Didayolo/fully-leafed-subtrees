
# This file was *autogenerated* from the file pl.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1)# programme lineaine sage

# arbre a deux sommets

p = MixedIntegerLinearProgram()

# arete
x = p.new_variable(binary = True)

# sommets
y = p.new_variable(binary = True)
y = p.new_variable(binary = True)

# feuilles
f = p.new_variable(integer = True)
f = p.new_variable(integer = True)

p.set_objective(f[_sage_const_1 ] + f[_sage_const_2 ] + x[_sage_const_1 ])

p.add_constraint(y[_sage_const_1 ] + y[_sage_const_2 ] == _sage_const_1 )  # k la taille du sous arbre 
p.add_constraint(x[_sage_const_1 ] <= (y[_sage_const_1 ] + y[_sage_const_2 ])/_sage_const_2 )  # presence d'une arete
p.add_constraint(y[_sage_const_1 ] + y[_sage_const_2 ] == x[_sage_const_1 ] + _sage_const_1 )  # arbre, connexe
p.add_constraint(f[_sage_const_1 ] <= _sage_const_2  - x[_sage_const_1 ])  # contraintes sur les feuilles
p.add_constraint(f[_sage_const_2 ] <= _sage_const_2  - x[_sage_const_1 ])
p.add_constraint(f[_sage_const_1 ] <= x[_sage_const_1 ] + _sage_const_1 )
p.add_constraint(f[_sage_const_2 ] <= x[_sage_const_1 ] + _sage_const_1 )

# contraintes utiles ou redondantes ?
p.add_constraint(f[_sage_const_1 ] <= x[_sage_const_1 ])
p.add_constraint(f[_sage_const_2 ] <= x[_sage_const_2 ])

#p.solve()
print(p.solve())
print(p.get_values(x))
print(p.get_values(y))
print(p.get_values(f))

